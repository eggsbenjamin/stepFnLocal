// Code generated by MockGen. DO NOT EDIT.
// Source: choice.go

// Package sfn is a generated GoMock package.
package sfn

import (
	state "github.com/eggsbenjamin/stepFnLocal/state"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockChoiceRule is a mock of ChoiceRule interface
type MockChoiceRule struct {
	ctrl     *gomock.Controller
	recorder *MockChoiceRuleMockRecorder
}

// MockChoiceRuleMockRecorder is the mock recorder for MockChoiceRule
type MockChoiceRuleMockRecorder struct {
	mock *MockChoiceRule
}

// NewMockChoiceRule creates a new mock instance
func NewMockChoiceRule(ctrl *gomock.Controller) *MockChoiceRule {
	mock := &MockChoiceRule{ctrl: ctrl}
	mock.recorder = &MockChoiceRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChoiceRule) EXPECT() *MockChoiceRuleMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockChoiceRule) Run(arg0 []byte) (bool, error) {
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockChoiceRuleMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockChoiceRule)(nil).Run), arg0)
}

// Next mocks base method
func (m *MockChoiceRule) Next() string {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockChoiceRuleMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockChoiceRule)(nil).Next))
}

// MockChoiceRuleFactory is a mock of ChoiceRuleFactory interface
type MockChoiceRuleFactory struct {
	ctrl     *gomock.Controller
	recorder *MockChoiceRuleFactoryMockRecorder
}

// MockChoiceRuleFactoryMockRecorder is the mock recorder for MockChoiceRuleFactory
type MockChoiceRuleFactoryMockRecorder struct {
	mock *MockChoiceRuleFactory
}

// NewMockChoiceRuleFactory creates a new mock instance
func NewMockChoiceRuleFactory(ctrl *gomock.Controller) *MockChoiceRuleFactory {
	mock := &MockChoiceRuleFactory{ctrl: ctrl}
	mock.recorder = &MockChoiceRuleFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChoiceRuleFactory) EXPECT() *MockChoiceRuleFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockChoiceRuleFactory) Create(arg0 state.ChoiceRuleDefinition) (ChoiceRule, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(ChoiceRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChoiceRuleFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChoiceRuleFactory)(nil).Create), arg0)
}
