// Code generated by MockGen. DO NOT EDIT.
// Source: state.go

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMachine is a mock of Machine interface
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// StartExecution mocks base method
func (m *MockMachine) StartExecution(arg0 []byte) (ExecutionResult, error) {
	ret := m.ctrl.Call(m, "StartExecution", arg0)
	ret0, _ := ret[0].(ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecution indicates an expected call of StartExecution
func (mr *MockMachineMockRecorder) StartExecution(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockMachine)(nil).StartExecution), arg0)
}

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockState) Run(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockStateMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockState)(nil).Run), arg0)
}

// Next mocks base method
func (m *MockState) Next() string {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockStateMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockState)(nil).Next))
}

// IsEnd mocks base method
func (m *MockState) IsEnd() bool {
	ret := m.ctrl.Call(m, "IsEnd")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnd indicates an expected call of IsEnd
func (mr *MockStateMockRecorder) IsEnd() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnd", reflect.TypeOf((*MockState)(nil).IsEnd))
}
