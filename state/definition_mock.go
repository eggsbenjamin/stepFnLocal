// Code generated by MockGen. DO NOT EDIT.
// Source: definition.go

// Package state is a generated GoMock package.
package state

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTyper is a mock of Typer interface
type MockTyper struct {
	ctrl     *gomock.Controller
	recorder *MockTyperMockRecorder
}

// MockTyperMockRecorder is the mock recorder for MockTyper
type MockTyperMockRecorder struct {
	mock *MockTyper
}

// NewMockTyper creates a new mock instance
func NewMockTyper(ctrl *gomock.Controller) *MockTyper {
	mock := &MockTyper{ctrl: ctrl}
	mock.recorder = &MockTyperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTyper) EXPECT() *MockTyperMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockTyper) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockTyperMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockTyper)(nil).Type))
}

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockValidator) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockValidatorMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate))
}

// MockTransitioner is a mock of Transitioner interface
type MockTransitioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransitionerMockRecorder
}

// MockTransitionerMockRecorder is the mock recorder for MockTransitioner
type MockTransitionerMockRecorder struct {
	mock *MockTransitioner
}

// NewMockTransitioner creates a new mock instance
func NewMockTransitioner(ctrl *gomock.Controller) *MockTransitioner {
	mock := &MockTransitioner{ctrl: ctrl}
	mock.recorder = &MockTransitionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransitioner) EXPECT() *MockTransitionerMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockTransitioner) Next() string {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockTransitionerMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTransitioner)(nil).Next))
}

// End mocks base method
func (m *MockTransitioner) End() bool {
	ret := m.ctrl.Call(m, "End")
	ret0, _ := ret[0].(bool)
	return ret0
}

// End indicates an expected call of End
func (mr *MockTransitionerMockRecorder) End() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockTransitioner)(nil).End))
}

// MockDefinition is a mock of Definition interface
type MockDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockDefinitionMockRecorder
}

// MockDefinitionMockRecorder is the mock recorder for MockDefinition
type MockDefinitionMockRecorder struct {
	mock *MockDefinition
}

// NewMockDefinition creates a new mock instance
func NewMockDefinition(ctrl *gomock.Controller) *MockDefinition {
	mock := &MockDefinition{ctrl: ctrl}
	mock.recorder = &MockDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDefinition) EXPECT() *MockDefinitionMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockDefinition) Type() string {
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockDefinitionMockRecorder) Type() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockDefinition)(nil).Type))
}

// Validate mocks base method
func (m *MockDefinition) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockDefinitionMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDefinition)(nil).Validate))
}
